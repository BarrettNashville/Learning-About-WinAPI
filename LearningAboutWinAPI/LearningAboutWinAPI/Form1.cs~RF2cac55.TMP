using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Automation;
using WinAPI;

namespace LearningAboutWinAPI
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        /* http://blogs.msdn.com/b/thottams/archive/2006/08/11/696013.aspx */

        // Structs for CreateProcess()
        public struct STARTUPINFO
        {
            public uint cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public uint dwX;
            public uint dwY;
            public uint dwXSize;
            public uint dwYSize;
            public uint dwXCountChars;
            public uint dwYCountChars;
            public uint dwFillAttribute;
            public uint dwFlags;
            public short wShowWindow;
            public short cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public uint dwProcessId;
            public uint dwThreadId;
        }
        public struct SECURITY_ATTRIBUTES
        {
            public int length;
            public IntPtr lpSecurityDescriptor;
            public bool bInheritHandle;
        }

        // CreateProcess()
        [DllImport("kernel32.dll")]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,
                        bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment,
                        string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        // For Windows Mobile, replace user32.dll with coredll.dll
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);


        [DllImport("user32.dll")]
        static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);


        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern IntPtr SendMessage(IntPtr hWnd, int Msg, int wParam, StringBuilder lParam);


        // GetWindowText()
        [DllImport("user32.dll", CharSet = CharSet.Unicode)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder strText, int maxCount);

        // GetWindowTextLength()
        [DllImport("user32.dll", CharSet = CharSet.Unicode)]
        private static extern int GetWindowTextLength(IntPtr hWnd);





        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                /* ATTEMPT TO OPEN APP */
                STARTUPINFO si = new STARTUPINFO();
                PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
                CreateProcess(@"MathApp.exe", null, IntPtr.Zero, IntPtr.Zero, false, 0, IntPtr.Zero,
                    null, ref si, out pi);
                /* SUCCESSFULLY OPENED APP */
                
                /* ATTEMP TO RETRIEVE HWND OF APP */
                var win = FindWindow(null, "Math App");
                /* SUCCESSFULLY RETRIEVED HWND OF APP */

                /

                MessageBox.Show(win.ToString());

                //// Find a window
                //var win = WindowSearch.GetWindowByText("calc", "", false, true);
                //var windows = FindWindowsWithText("Math");
                ////var win = WindowSearch.GetWindowByText("notepad++", "", false, true);

                //var wins = windows.ToList();

                //IntPtr result = (IntPtr)0;
                //foreach (var item in wins)
                //{
                //    result = item;
                //}

                //// Set it foreground
                //WindowManipulation.SetForegroundWindow(win);

                //Thread.Sleep(500);

                ///* Key Constants:
                // * https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
                // */

                //const int aKey = 0x41;
                //const int cKey = 0x43;
                //const int WM_GETTEXT = 0x000D;

                ///* Stack Overflow question with answer about EnumWindows() and GetWindowThreadProcessId()
                // * http://stackoverflow.com/questions/21462733/how-to-get-hwnd-of-new-process-created-by-createprocess
                // */

                ///* Stack overflow question with complete example of EnumWindows()
                // * http://stackoverflow.com/questions/19867402/how-can-i-use-enumwindows-to-find-windows-with-a-specific-caption-title
                // */

                ///* Stack overflow question with working solution for Getting the Child Windows of a Window
                // * http://stackoverflow.com/questions/1363167/how-can-i-get-the-child-windows-of-a-window-given-its-hwnd
                // */




                //MouseKeyboard.PressKey(KeyConstants.VK_NUMPAD3);
                //MouseKeyboard.PressKey(KeyConstants.VK_TAB);
                //MouseKeyboard.PressKey(KeyConstants.VK_NUMPAD1);
                //MouseKeyboard.PressKey(KeyConstants.VK_TAB);
                //MouseKeyboard.PressKey(KeyConstants.VK_DOWN);
                ////MouseKeyboard.PressKey(KeyConstants.VK_RETURN);

                //System.Text.StringBuilder text = new System.Text.StringBuilder(255);  // or length from call with GETTEXTLENGTH
                //int RetVal = SendMessage(result, WM_GETTEXT, text.Capacity, text);

                //MessageBox.Show(RetVal.ToString());

                //Thread.Sleep(500);

                //MouseKeyboard.PressKey(cKey, false, false, true);

                ////listBox1.Items.Insert(0, RetVal.ToString());
                ////listBox1.Items.Insert(0, Clipboard.GetText());

                //Clipboard.Clear();


            }
            catch (Exception er)
            {
                MessageBox.Show(er.Message);
            }
        }

    }
}
